{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2022-09-14T14:47:21.833Z",
    "end": "2022-09-14T14:47:23.434Z",
    "duration": 1601,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d9dbf594-4b4a-4c60-a6ef-033200901703",
      "title": "",
      "fullFile": "cypress/integration/1.usuarios.spec.js",
      "file": "cypress/integration/1.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "44d04166-32cc-4a24-9606-3a6c2b73748d",
          "title": "Casos de teste sobre rota/usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os usuários cadastrados na Serverest",
              "fullTitle": "Casos de teste sobre rota/usuarios da API Serverest Deve buscar todos os usuários cadastrados na Serverest",
              "timedOut": null,
              "duration": 575,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.contractValidation(res, 'get-usuarios', 200);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "6c490ffe-5716-4803-baf0-f25174e5778f",
              "parentUUID": "44d04166-32cc-4a24-9606-3a6c2b73748d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve postar um novo usuario administrador existente",
              "fullTitle": "Casos de teste sobre rota/usuarios da API Serverest Não deve postar um novo usuario administrador existente",
              "timedOut": null,
              "duration": 511,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.postarUsuarioSemSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 400);\n  expect(res.body.message).to.be.eq('Este email já está sendo usado');\n});",
              "err": {
                "message": "Error: schema with key or id \"http://example.com/example.json\" already exists",
                "estack": "Error: schema with key or id \"http://example.com/example.json\" already exists\n    at Ajv._checkUnique (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:3722:19)\n    at Ajv._addSchema (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:3713:22)\n    at Ajv.compile (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:3415:26)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:153:26)",
                "diff": null
              },
              "uuid": "474ef596-082f-4ea1-8509-14ac5856b9bc",
              "parentUUID": "44d04166-32cc-4a24-9606-3a6c2b73748d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar login com sucesso",
              "fullTitle": "Casos de teste sobre rota/usuarios da API Serverest Deve realizar login com sucesso",
              "timedOut": null,
              "duration": 441,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioParaLogin();\ncy.get('@usuarioLogin').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    _validaServerest.default.validarBuscaDeUsuarios(res);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "91bbe955-091c-4ac9-af46-ee45b3602c21",
              "parentUUID": "44d04166-32cc-4a24-9606-3a6c2b73748d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c490ffe-5716-4803-baf0-f25174e5778f",
            "91bbe955-091c-4ac9-af46-ee45b3602c21"
          ],
          "failures": [
            "474ef596-082f-4ea1-8509-14ac5856b9bc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1527,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}